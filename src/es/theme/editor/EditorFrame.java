/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the savefileHandler.
 */
package es.theme.editor;

import es.theme.editor.objects.ChangesListener;
import es.theme.editor.objects.SavefileHandler;
import es.theme.editor.objects.SaveFile;
import es.theme.editor.objects.ThemeBuilder;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;


/**
 *
 * @author Zuppor
 */
public class EditorFrame extends javax.swing.JFrame implements ChangesListener{
    
    private final SavefileHandler savefileHandler;
    private ThemeBuilder themeBuilder;
    private boolean saved;
    private Preferences prefs;
    BuilderPanel builderPanel;

    /**
     * Creates new form EditorFrame
     */
    public EditorFrame() {
        initComponents();
        savefileHandler = new SavefileHandler();
        themeBuilder = new ThemeBuilder();
        
        
        SwingUtilities.invokeLater(new Runnable(){
            public void run(){
                builderPanel = new BuilderPanel(themeBuilder);
                //todo remove this line:
                //builderPanel.setVisible(true);
            }
        });
        
        
        addWindowListener(new WindowAdapter(){
            @Override
            public void windowClosing(WindowEvent e){
                CloseProgram();
            }
        });
        
        XMLpreviewTextArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_XML);
        
        for(String name : SaveFile.defaultSystems){
            SystemComboBox.addItem(name);
            XMLComboBox.addItem(name);
        }
        
        prefs = Preferences.userNodeForPackage(es.theme.editor.objects.SavefileHandler.class);
        
        boolean b = true;
        try{
            b = prefs.getBoolean("open_last_project_on_start", true);
        }catch(NullPointerException e){
            prefs.putBoolean("open_last_project_on_start", true);
        }
        
        if(b){
            try{
                String lastProjectPath = prefs.get("last_project", "");
                if(!lastProjectPath.equals("")){
                    try {
                        OpenProject(new File(lastProjectPath));
                    } catch (FileNotFoundException ex) {
                        System.out.println("Last open project not found");
                        //Logger.getLogger(EditorFrame.class.getName()).log(Level.SEVERE, null, ex);
                        prefs.put("last_project", "");
                        ToggleMenuItems(false);
                    } catch (IOException ex) {
                        Logger.getLogger(EditorFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else{
                    ToggleMenuItems(false);
                }
            }catch(NullPointerException e){
                prefs.put("last_project", "");
            }
        }
        
        
        
        SetSavedState(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainTabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        SecondaryTabbedPane = new javax.swing.JTabbedPane();
        SystemPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        SystemComboBox = new javax.swing.JComboBox<>();
        InspectorsListPanel = new es.theme.editor.InspectorsListPanel();
        BasicPanel = new javax.swing.JPanel();
        DetailedPanel = new javax.swing.JPanel();
        GlobalPropertiesPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        XMLComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        XMLpreviewTextArea = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        NewProjectMenuItem = new javax.swing.JMenuItem();
        OpenprojectMenuItem = new javax.swing.JMenuItem();
        SaveMenuItem = new javax.swing.JMenuItem();
        SaveasMenuItem = new javax.swing.JMenuItem();
        CloseprojectMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        BuildMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        ExitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        ThemeinfoMenuItem = new javax.swing.JMenuItem();
        PreferencesMenuItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        ESTCinfoMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("ES Theme Creator v1.0");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 46, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
        );

        SystemComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SystemComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SystemPanelLayout = new javax.swing.GroupLayout(SystemPanel);
        SystemPanel.setLayout(SystemPanelLayout);
        SystemPanelLayout.setHorizontalGroup(
            SystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SystemPanelLayout.createSequentialGroup()
                .addGap(306, 306, 306)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SystemComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(InspectorsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        SystemPanelLayout.setVerticalGroup(
            SystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(SystemPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(SystemComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(InspectorsListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        SecondaryTabbedPane.addTab("System View", SystemPanel);

        javax.swing.GroupLayout BasicPanelLayout = new javax.swing.GroupLayout(BasicPanel);
        BasicPanel.setLayout(BasicPanelLayout);
        BasicPanelLayout.setHorizontalGroup(
            BasicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 634, Short.MAX_VALUE)
        );
        BasicPanelLayout.setVerticalGroup(
            BasicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
        );

        SecondaryTabbedPane.addTab("Basic View", BasicPanel);

        javax.swing.GroupLayout DetailedPanelLayout = new javax.swing.GroupLayout(DetailedPanel);
        DetailedPanel.setLayout(DetailedPanelLayout);
        DetailedPanelLayout.setHorizontalGroup(
            DetailedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 634, Short.MAX_VALUE)
        );
        DetailedPanelLayout.setVerticalGroup(
            DetailedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
        );

        SecondaryTabbedPane.addTab("Detailed View", DetailedPanel);

        javax.swing.GroupLayout GlobalPropertiesPanelLayout = new javax.swing.GroupLayout(GlobalPropertiesPanel);
        GlobalPropertiesPanel.setLayout(GlobalPropertiesPanelLayout);
        GlobalPropertiesPanelLayout.setHorizontalGroup(
            GlobalPropertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 634, Short.MAX_VALUE)
        );
        GlobalPropertiesPanelLayout.setVerticalGroup(
            GlobalPropertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
        );

        SecondaryTabbedPane.addTab("Global Properties", GlobalPropertiesPanel);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SecondaryTabbedPane)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(SecondaryTabbedPane)
                .addContainerGap())
        );

        MainTabbedPane.addTab("GUI Preview", jPanel1);

        XMLComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                XMLComboBoxActionPerformed(evt);
            }
        });

        XMLpreviewTextArea.setEditable(false);
        XMLpreviewTextArea.setColumns(20);
        XMLpreviewTextArea.setRows(5);
        jScrollPane1.setViewportView(XMLpreviewTextArea);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(XMLComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(XMLComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                .addContainerGap())
        );

        MainTabbedPane.addTab("XML Preview", jPanel2);

        jMenu1.setText("File");

        NewProjectMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        NewProjectMenuItem.setText("New project");
        NewProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewProjectMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(NewProjectMenuItem);

        OpenprojectMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        OpenprojectMenuItem.setText("Open...");
        OpenprojectMenuItem.setToolTipText("Open an existing project");
        OpenprojectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenprojectMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(OpenprojectMenuItem);

        SaveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SaveMenuItem.setText("Save");
        SaveMenuItem.setToolTipText("Save current project");
        SaveMenuItem.setEnabled(false);
        SaveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(SaveMenuItem);

        SaveasMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        SaveasMenuItem.setText("Save as...");
        SaveasMenuItem.setToolTipText("Save current work in a new project");
        SaveasMenuItem.setEnabled(false);
        SaveasMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveasMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(SaveasMenuItem);

        CloseprojectMenuItem.setText("Close project");
        CloseprojectMenuItem.setToolTipText("Close current project");
        CloseprojectMenuItem.setEnabled(false);
        CloseprojectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseprojectMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(CloseprojectMenuItem);
        jMenu1.add(jSeparator1);

        BuildMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        BuildMenuItem.setText("Build...");
        BuildMenuItem.setEnabled(false);
        BuildMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuildMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(BuildMenuItem);
        jMenu1.add(jSeparator2);

        ExitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        ExitMenuItem.setText("Exit");
        ExitMenuItem.setToolTipText("Close program");
        ExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(ExitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        ThemeinfoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        ThemeinfoMenuItem.setText("Theme info");
        ThemeinfoMenuItem.setToolTipText("Edit theme info");
        ThemeinfoMenuItem.setEnabled(false);
        ThemeinfoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThemeinfoMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(ThemeinfoMenuItem);

        PreferencesMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        PreferencesMenuItem.setText("Preferences");
        PreferencesMenuItem.setToolTipText("Edit preferences");
        PreferencesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PreferencesMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(PreferencesMenuItem);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        ESTCinfoMenuItem.setText("About...");
        ESTCinfoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ESTCinfoMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(ESTCinfoMenuItem);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainTabbedPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //Open project
    private void OpenprojectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenprojectMenuItemActionPerformed
        if(!CloseProject()) return;
        
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        ExtensionFileFilter fileFilter = new ExtensionFileFilter(".estc","estc");
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setFileFilter(fileFilter);
        
        int result = fileChooser.showOpenDialog(this);
        if(result == JFileChooser.APPROVE_OPTION){
            try {
                OpenProject(fileChooser.getSelectedFile());
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(EditorFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(EditorFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_OpenprojectMenuItemActionPerformed
    
    //exit
    private void ExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitMenuItemActionPerformed
        CloseProgram();
    }//GEN-LAST:event_ExitMenuItemActionPerformed

    private void BuildMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuildMenuItemActionPerformed
        try {
            savefileHandler.saveCurrentProject();
            SetSavedState(true);
            //Object options[] = {"Cancel"};
            //JOptionPane.showOptionDialog(null,new BuilderPanel(themeBuilder),"Build theme",options,options[0]);
            
            builderPanel.setVisible(true);
            //System.out.println("Done building");
        } catch (IOException ex) {
            Logger.getLogger(EditorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BuildMenuItemActionPerformed

    private void NewProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewProjectMenuItemActionPerformed
        if(!CloseProject()) return;
        
        File file = WriteFile();
        if(file!=null){
            
            try {
                savefileHandler.saveProject(new SaveFile(file.getName().substring(0,file.getName().length()-5)),file.getAbsolutePath());
                OpenProject(file);
            }
             catch (FileNotFoundException ex) {
                Logger.getLogger(EditorFrame.class.getName()).log(Level.SEVERE, null, ex);
            }catch (IOException ex) {
                Logger.getLogger(EditorFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_NewProjectMenuItemActionPerformed

    private void SaveasMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveasMenuItemActionPerformed
        File file = WriteFile();
        if(file!=null){
            try {
                savefileHandler.saveProject(savefileHandler.getCurrSaveFile(), file.getAbsolutePath());
            } catch (IOException ex) {
                Logger.getLogger(EditorFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_SaveasMenuItemActionPerformed

    private void SaveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveMenuItemActionPerformed
        try {
            savefileHandler.saveCurrentProject();
            SetSavedState(true);
        } catch (IOException ex) {
            Logger.getLogger(EditorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SaveMenuItemActionPerformed

    private void ThemeinfoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThemeinfoMenuItemActionPerformed
        int textFieldWidth = 10;
        JTextField Field1 = new JTextField(textFieldWidth);
        Field1.setText(savefileHandler.getCurrSaveFile().getInfo("name"));
        JTextField Field2 = new JTextField(textFieldWidth);
        Field2.setText(savefileHandler.getCurrSaveFile().getInfo("version"));
        JTextField Field3 = new JTextField(textFieldWidth);
        Field3.setText(savefileHandler.getCurrSaveFile().getInfo("author"));
        JTextField Field4 = new JTextField(textFieldWidth);
        Field4.setText(savefileHandler.getCurrSaveFile().getInfo("email"));
        JTextField Field5 = new JTextField(textFieldWidth);
        Field5.setText(savefileHandler.getCurrSaveFile().getInfo("website"));
        JTextField Field6 = new JTextField(textFieldWidth);
        Field6.setText(savefileHandler.getCurrSaveFile().getInfo("license"));
        JTextField Field7 = new JTextField(textFieldWidth);
        Field7.setText(savefileHandler.getCurrSaveFile().getInfo("basedon"));

        JPanel myPanel = new JPanel();
        myPanel.setLayout(new GridLayout(7,2));
        myPanel.add(new JLabel("Name:"));
        myPanel.add(Field1);
        myPanel.add(new JLabel("Version:"));
        myPanel.add(Field2);
        myPanel.add(new JLabel("Author:"));
        myPanel.add(Field3);
        myPanel.add(new JLabel("Email:"));
        myPanel.add(Field4);
        myPanel.add(new JLabel("Website:"));
        myPanel.add(Field5);
        myPanel.add(new JLabel("License:"));
        myPanel.add(Field6);
        myPanel.add(new JLabel("Based on:"));
        myPanel.add(Field7);

        int result = JOptionPane.showConfirmDialog(null, myPanel, 
                 "Edit theme info", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            Map<String,String> info = new HashMap<>();
            info.put("name",Field1.getText().trim());
            info.put("version",Field2.getText().trim());
            info.put("author",Field3.getText().trim());
            info.put("email",Field4.getText().trim());
            info.put("website",Field5.getText().trim());
            info.put("license",Field6.getText().trim());
            info.put("basedon",Field7.getText().trim());
            
            savefileHandler.getCurrSaveFile().setInfos(info);
            SetSavedState(false);
        }

    }//GEN-LAST:event_ThemeinfoMenuItemActionPerformed

    private void CloseprojectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseprojectMenuItemActionPerformed
        if(!CloseProject()) return;
        
        SetSavedState(true);
        ToggleMenuItems(false);
    }//GEN-LAST:event_CloseprojectMenuItemActionPerformed

    private void ESTCinfoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ESTCinfoMenuItemActionPerformed
        try {
            final URI uri = new URI("https://www.youtube.com/user/ZupporCreations");
        
            class OpenUrlAction implements ActionListener{
                @Override
                public void actionPerformed(ActionEvent e){
                    if(Desktop.isDesktopSupported()){
                        try {
                            Desktop.getDesktop().browse(uri);
                        } catch (IOException ex) {
                            Logger.getLogger(EditorFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
            
            JPanel panel = new JPanel();
            JButton button = new JButton();
            button.setText("<HTML><FONT color=\"#000099\"><U>Go to the website</U></FONT></HTML>");
            button.setBorderPainted(false);
            button.setOpaque(false);
            button.setBackground(Color.WHITE);
            button.setToolTipText(uri.toString());
            button.addActionListener(new OpenUrlAction());

            panel.setLayout(new GridLayout(3,1));
            
            panel.add(new JLabel("Author: Andrea Ranalli"));
            panel.add(new JLabel("Version 1.0"));
            panel.add(button);

            JOptionPane.showConfirmDialog(null,panel,"About ES Theme Creator",JOptionPane.CLOSED_OPTION);
        } catch (URISyntaxException ex) {
            Logger.getLogger(EditorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_ESTCinfoMenuItemActionPerformed

    private void PreferencesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PreferencesMenuItemActionPerformed
        JPanel panel = new JPanel();
        JCheckBox box1 = new JCheckBox("Open last project on startup");
        box1.setSelected(prefs.getBoolean("open_last_project_on_start", true));
        
        panel.setLayout(new GridLayout(1,1));
        panel.add(box1);
        
        int result = JOptionPane.showConfirmDialog(null,panel,"Preferences",JOptionPane.OK_CANCEL_OPTION);
        
        if(result == JOptionPane.OK_OPTION){
            prefs.putBoolean("open_last_project_on_start", box1.isSelected());
        }
    }//GEN-LAST:event_PreferencesMenuItemActionPerformed

    private void SystemComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SystemComboBoxActionPerformed
        //UpdateInspector(SystemComboBox.getSelectedItem().toString());
    }//GEN-LAST:event_SystemComboBoxActionPerformed

    private void XMLComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_XMLComboBoxActionPerformed
        UpdateXMLTextArea(XMLComboBox.getSelectedItem().toString());
    }//GEN-LAST:event_XMLComboBoxActionPerformed

    private boolean CloseProject(){
        if(savefileHandler.getCurrentProjectFile() != null && !saved){
            JPanel panel = new JPanel();
            
            panel.add(new JLabel("Save changes before closing?"));

            int result = JOptionPane.showConfirmDialog(null,panel,
                    "Closing without saving",JOptionPane.YES_NO_CANCEL_OPTION);
            switch (result) {
                case JOptionPane.YES_OPTION:
                    try {
                        savefileHandler.saveCurrentProject();
                        savefileHandler.closeCurrentProject();
                    } catch (IOException ex) {
                        Logger.getLogger(EditorFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                break;
                
                case JOptionPane.NO_OPTION:
                    try {
                        savefileHandler.closeCurrentProject();
                    } catch (IOException ex) {
                        Logger.getLogger(EditorFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                break;
                
                default:
                    return false;
            }
        }
        
        try {
            savefileHandler.closeCurrentProject();
        } catch (IOException ex) {
            Logger.getLogger(EditorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return true;
    }
    
    private void OpenProject(File file) throws FileNotFoundException, IOException{
        savefileHandler.openProject(file);
        themeBuilder.setProject(savefileHandler.getCurrSaveFile());
        SetSavedState(true);
        ToggleMenuItems(true);
        prefs.put("last_project", file.getAbsolutePath());
        
        SystemComboBox.setSelectedIndex(0);
        UpdateInspector(SystemComboBox.getItemAt(0));
        
        XMLComboBox.setSelectedIndex(0);
        UpdateXMLTextArea(XMLComboBox.getItemAt(0));
    }
    
    private File WriteFile(){
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setFileFilter(new FileNameExtensionFilter("estc file","estc"));
        
        int result = fileChooser.showSaveDialog(this);
        
        if(result == JFileChooser.APPROVE_OPTION){
            File file = fileChooser.getSelectedFile();
            if(!file.toString().endsWith(".estc")){
                file = new File(file.toString()+".estc");
            }
            return file;
        }
        
        return null;
    }
    
    private void ToggleMenuItems(boolean toggle){
        CloseprojectMenuItem.setEnabled(toggle);
        SaveMenuItem.setEnabled(toggle);
        SaveasMenuItem.setEnabled(toggle);
        BuildMenuItem.setEnabled(toggle);
        ThemeinfoMenuItem.setEnabled(toggle);
        MainTabbedPane.setVisible(toggle);
    }
    
    public final void SetSavedState(boolean saved){
        String nameInTitle = "";
        
        if(savefileHandler.getCurrentProjectFile()!=null){
            nameInTitle = "  -  " + savefileHandler.getCurrentProjectFile().getName();
        }
        
        setTitle("ES Theme editor v1.0" + nameInTitle);
        
        if(!saved){
            setTitle(getTitle() + "*");
        }
        
        this.saved = saved;
    }
    
    private void UpdateInspector(String referringSystem){
        InspectorsListPanel.refresh(savefileHandler.getCurrSaveFile().getSystemByName(referringSystem).getSystemView());
        
        savefileHandler.getCurrSaveFile().addListener(this);
    }
    
    
    private void UpdateXMLTextArea(String refSystem){
        try {
            XMLpreviewTextArea.setText(themeBuilder.generateXML(refSystem));
            XMLpreviewTextArea.setCaretPosition(0);
        } catch (IOException ex) {
            Logger.getLogger(EditorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    private void CloseProgram(){
        if(!CloseProject()) return;
        builderPanel.dispose();
        System.exit(0);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new EditorFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BasicPanel;
    private javax.swing.JMenuItem BuildMenuItem;
    private javax.swing.JMenuItem CloseprojectMenuItem;
    private javax.swing.JPanel DetailedPanel;
    private javax.swing.JMenuItem ESTCinfoMenuItem;
    private javax.swing.JMenuItem ExitMenuItem;
    private javax.swing.JPanel GlobalPropertiesPanel;
    private es.theme.editor.InspectorsListPanel InspectorsListPanel;
    private javax.swing.JTabbedPane MainTabbedPane;
    private javax.swing.JMenuItem NewProjectMenuItem;
    private javax.swing.JMenuItem OpenprojectMenuItem;
    private javax.swing.JMenuItem PreferencesMenuItem;
    private javax.swing.JMenuItem SaveMenuItem;
    private javax.swing.JMenuItem SaveasMenuItem;
    private javax.swing.JTabbedPane SecondaryTabbedPane;
    private javax.swing.JComboBox<String> SystemComboBox;
    private javax.swing.JPanel SystemPanel;
    private javax.swing.JMenuItem ThemeinfoMenuItem;
    private javax.swing.JComboBox<String> XMLComboBox;
    private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea XMLpreviewTextArea;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onChangesHappened(ChangeType changeType) {
        if(null != changeType)switch (changeType) {
            case VALUE_CHANGED:
                
                break;
                
            case ELEMENT_ADDED:
            case ELEMENT_REMOVED:
                UpdateInspector(SystemComboBox.getSelectedItem().toString());
                break;
                
            default:
                break;
        }
        
        UpdateXMLTextArea(XMLComboBox.getSelectedItem().toString());
        
        SetSavedState(false);
    }

}
