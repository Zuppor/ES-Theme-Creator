/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package es.theme.editor.inspectors;

import es.theme.editor.ExtensionFileFilter;
import es.theme.editor.objects.FilePath;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author andrea
 */
public class FileInspector extends javax.swing.JPanel {
    
    public FilePath path;
    
    ExtensionFileFilter fileFilter;

    /**
     * Creates new form ImageInspector
     * @param varName
     * @param extensions
     * @param path
     */
    public FileInspector(String varName,FilePath path,String... extensions) {
        initComponents();
        
        UsecustomCheckBox.setText("Use custom " + varName);
        
        fileFilter = new ExtensionFileFilter(null,extensions);
        this.path = path;
        BrowseTextField.setText(path.getPath());
        
        UsecustomCheckBox.setSelected(path.isEnabled());
        toggleBrowseUI(path.isEnabled());
        
        BrowseTextField.getDocument().addDocumentListener(new DocumentListener(){
            @Override
            public void insertUpdate(DocumentEvent de) {
                path.setPath(BrowseTextField.getText());
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                path.setPath(BrowseTextField.getText());
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                path.setPath(BrowseTextField.getText());
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BrowseTextField = new javax.swing.JTextField();
        BrowseButton = new javax.swing.JButton();
        Label = new javax.swing.JLabel();
        UsecustomCheckBox = new javax.swing.JCheckBox();

        setPreferredSize(new java.awt.Dimension(270, 103));

        BrowseButton.setText("Browse");
        BrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseButtonActionPerformed(evt);
            }
        });

        Label.setText("Path:");

        UsecustomCheckBox.setText("Use custom [varname]");
        UsecustomCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsecustomCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BrowseTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BrowseButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(UsecustomCheckBox)
                        .addGap(0, 77, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(UsecustomCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BrowseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BrowseButton)
                    .addComponent(Label)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void BrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseButtonActionPerformed
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setFileFilter(fileFilter);
        
        int result = fileChooser.showOpenDialog(this);
        if(result == JFileChooser.APPROVE_OPTION){
            BrowseTextField.setText(fileChooser.getSelectedFile().getAbsolutePath());
            path.setPath(BrowseTextField.getText());
        }
    }//GEN-LAST:event_BrowseButtonActionPerformed

    private void UsecustomCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsecustomCheckBoxActionPerformed
        toggleBrowseUI(UsecustomCheckBox.isSelected());
        path.setEnabled(UsecustomCheckBox.isSelected());
    }//GEN-LAST:event_UsecustomCheckBoxActionPerformed

    private void toggleBrowseUI(boolean x){
        Label.setEnabled(x);
        BrowseButton.setEnabled(x);
        BrowseTextField.setEnabled(x);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BrowseButton;
    private javax.swing.JTextField BrowseTextField;
    private javax.swing.JLabel Label;
    private javax.swing.JCheckBox UsecustomCheckBox;
    // End of variables declaration//GEN-END:variables
}
